package dev.bluefalcon.attestation

import android.app.Fragment
import android.util.Log
import com.google.gson.JsonObject
import dev.bluefalcon.log
import java.io.ByteArrayInputStream
import java.io.IOException
import java.nio.charset.StandardCharsets
import java.security.InvalidKeyException
import java.security.NoSuchAlgorithmException
import java.security.NoSuchProviderException
import java.security.SignatureException
import java.security.cert.CertificateException
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import java.util.*
import dev.bluefalcon.attestation.Constants.GOOGLE_ROOT_CERTIFICATE
import dev.bluefalcon.attestation.CertificateRevocationStatus
import dev.bluefalcon.attestation.ParsedAttestationRecord
import java.nio.charset.StandardCharsets.UTF_8

class KeyAttestation {

    @Throws(
        CertificateException::class,
        NoSuchAlgorithmException::class,
        InvalidKeyException::class,
        NoSuchProviderException::class,
        SignatureException::class,
        IOException::class
    )
    fun verifyCertificateChain(certs: Array<X509Certificate?>): String {
        var parent = certs[certs.size - 1]
        for (i in certs.indices.reversed()) {
            val cert = certs[i]
            // Verify that the certificate has not expired.
            if (cert != null) {
                cert.checkValidity()
            }
            if (cert != null) {
                if (parent != null) {
                    cert.verify(parent.publicKey)
                }
            }
            parent = cert
//            try {
//                val revo = CertificateRevocationStatus();
//                val certStatus = cert?.serialNumber?.let {
//                    revo
//                        .fetchStatus(it)
//                }
//                if (certStatus != null) {
//                    throw CertificateException(
//                        "Certificate revocation status is " + certStatus.status?.name
//                    )
//                }
//            } catch (e: IOException) {
//                throw IOException("Unable to fetch certificate status. Check connectivity.")
//            }
        }
        printAttestion(certs)

        // If the attestation is trustworthy and the device ships with hardware-
        // level key attestation, Android 7.0 (API level 24) or higher, and
        // Google Play services, the root certificate should be signed with the
        // Google attestation root key.
        GOOGLE_ROOT_CERTIFICATE.byteInputStream(StandardCharsets.UTF_8)
        val secureRoot = CertificateFactory.getInstance("X.509")
            .generateCertificate(
                GOOGLE_ROOT_CERTIFICATE.byteInputStream(StandardCharsets.UTF_8)
            ) as X509Certificate
        if (Arrays.equals(
                secureRoot.publicKey.encoded,
                certs[certs.size - 1]?.publicKey?.encoded
            )
        ) {
            Log.i("Attestation", "verifyCertificateChain: true")
            println(
                "The root certificate is correct, so this attestation is trustworthy, as long as none of"
                        + "\n the certificates in the chain have been revoked. A production-level system"
                        + "\n should check the certificate revocation lists using the distribution points that"
                        + "\n are listed in the intermediate and root certificates."
            )
            return "The root certificate is correct, so this attestation is trustworthy, as long as none of " +
                    "the certificates in the chain have been revoked."
        } else {
            Log.i("Attestation", "verifyCertificateChain: false")
            println(
                ("The root certificate is NOT correct. The attestation was probably generated by"
                        + "\n software, not in secure hardware. This means that, although the attestation"
                        + "\n contents are probably valid and correct, there is no proof that they are in fact"
                        + "\n correct. If you're using a production-level system, you should now treat the"
                        + "\n properties of this attestation certificate as advisory only, and you shouldn't"
                        + "\n rely on this attestation certificate to provide security guarantees.")
            )
            return "The root certificate is NOT correct. The attestation was probably generated by" +
                    " software, not in secure hardware."
        }
    }

    fun printAttestion(certs: Array<X509Certificate?>) {

        val parsedAttestationRecordx = ParsedAttestationRecord()
        val AttestationInfo = parsedAttestationRecordx.createParsedAttestationRecord(certs[0] as X509Certificate)
        val listAttestation = JsonObject();
        listAttestation.addProperty("Version",parsedAttestationRecordx.attestationVersion)
        listAttestation.addProperty("SecurityLevel", parsedAttestationRecordx.attestationSecurityLevel.toString())
        listAttestation.addProperty("KeymasterVersion", parsedAttestationRecordx.keymasterVersion)
        listAttestation.addProperty("KeymasterLevel", parsedAttestationRecordx.keymasterSecurityLevel.toString())
        listAttestation.addProperty("AttestationChal", parsedAttestationRecordx.attestationChallenge.toString())
        listAttestation.addProperty("UniqueID", parsedAttestationRecordx.uniqueId.toString())
        Log.i("Attestation", "List ===> " + listAttestation)

        println("==========Software Enforced===========")
       printAuthorizationList(parsedAttestationRecordx.softwareEnforced, "\t")
        println("==========TEE Enforced===========")
        printAuthorizationList(parsedAttestationRecordx.teeEnforced, "\t")

    }

    private fun printAuthorizationList(authorizationList: AuthorizationList?, indent: String) {
        // Detailed explanation of the keys and their values can be found here:
        // https://source.android.com/security/keystore/tags
        println(indent + "Purpose(s): " + authorizationList?.purpose)
        println(indent + "Algorithm: " + authorizationList?.algorithm)
        println(indent + "Key Size: " + authorizationList?.keySize)
        println(indent + "Digest: " + authorizationList?.digest)
        println(indent + "Padding: " + authorizationList?.padding)
        println(indent + "EC Curve: " + authorizationList?.ecCurve)
        println(indent + "RSA Public Exponent: " + authorizationList?.rsaPublicExponent)
        println(indent + "Rollback Resistance: " + authorizationList?.rollbackResistance)
        println(indent + "Active DateTime: " + authorizationList?.activeDateTime)
        println(indent + "Origination Expire DateTime: " + authorizationList?.originationExpireDateTime)
        println(indent + "Usage Expire DateTime: " + authorizationList?.usageExpireDateTime)
        println(indent + "No Auth Required: " + authorizationList?.noAuthRequired)
        println(indent + "User Auth: " + authorizationList?.ecCurve)
        println(indent + "EC Curve: " + authorizationList?.ecCurve)
        println(indent + "Allow While On Body: " + authorizationList?.allowWhileOnBody)
        println(
            indent
                    + "Trusted User Presence Required: "
                    + authorizationList?.trustedUserPresenceRequired
        )
        println(
            indent + "Trusted Confirmation Required: " + authorizationList?.trustedConfirmationRequired
        )
        println(
            indent + "Unlocked Device Required: " + authorizationList?.unlockedDeviceRequired
        )
        println(indent + "All Applications: " + authorizationList?.allApplications)
//        KeyAttestation.printOptional<Any>(
//            authorizationList.applicationId,
//            indent + "Application ID"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.creationDateTime,
//            indent + "Creation DateTime"
//        )
//        KeyAttestation.printOptional<Any>(authorizationList.origin, indent + "Origin")
//        println(indent + "Rollback Resistant: " + authorizationList.rollbackResistant)
//        if (authorizationList.rootOfTrust!!.isPresent) {
//            println(indent + "Root Of Trust:")
//            KeyAttestation.printRootOfTrust(authorizationList.rootOfTrust, indent + "\t")
//        }
//        KeyAttestation.printOptional<Any>(authorizationList.osVersion, indent + "OS Version")
//        KeyAttestation.printOptional<Any>(authorizationList.osPatchLevel, indent + "OS Patch Level")
//        if (authorizationList.attestationApplicationId!!.isPresent) {
//            println(indent + "Attestation Application ID:")
//            KeyAttestation.printAttestationApplicationId(
//                authorizationList.attestationApplicationId,
//                indent + "\t"
//            )
//        }

//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationApplicationIdBytes,
//            indent + "Attestation Application ID Bytes"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdBrand,
//            indent + "Attestation ID Brand"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdDevice,
//            indent + "Attestation ID Device"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdProduct,
//            indent + "Attestation ID Product"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdSerial,
//            indent + "Attestation ID Serial"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdImei,
//            indent + "Attestation ID IMEI"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdMeid,
//            indent + "Attestation ID MEID"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdManufacturer, indent + "Attestation ID Manufacturer"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.attestationIdModel,
//            indent + "Attestation ID Model"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.vendorPatchLevel,
//            indent + "Vendor Patch Level"
//        )
//        KeyAttestation.printOptional<Any>(
//            authorizationList.bootPatchLevel,
//            indent + "Boot Patch Level"
//        )
    }
}

